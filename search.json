[{"path":"https://kwstat.github.io/connected/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://kwstat.github.io/connected/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://kwstat.github.io/connected/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://kwstat.github.io/connected/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://kwstat.github.io/connected/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://kwstat.github.io/connected/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://kwstat.github.io/connected/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://kwstat.github.io/connected/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://kwstat.github.io/connected/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://kwstat.github.io/connected/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://kwstat.github.io/connected/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://kwstat.github.io/connected/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://kwstat.github.io/connected/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://kwstat.github.io/connected/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://kwstat.github.io/connected/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://kwstat.github.io/connected/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://kwstat.github.io/connected/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://kwstat.github.io/connected/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://kwstat.github.io/connected/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://kwstat.github.io/connected/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://kwstat.github.io/connected/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://kwstat.github.io/connected/articles/introduction_to_the_connected_package.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to the 'connected' package","text":"connected package arose experience analyzing data linear models linear mixed models. Sometimes models failed converge, reason convergence investigated, sometimes turned either data connected else weakly connected. main functions connected package : con_check() con_view() con_filter()","code":""},{"path":"https://kwstat.github.io/connected/articles/introduction_to_the_connected_package.html","id":"visualizing-two-way-connectedness-with-con_view","dir":"Articles","previous_headings":"","what":"Visualizing two-way connectedness with con_view()","title":"Introduction to the 'connected' package","text":"illustrate idea connectedness, consider following example data Fernando et al. (1983) inspired cattle industry 2 factors: genotype herd. row represents one animal herd. Although data response variable, can simulate response variable see data analyzed linear model 2 factors. warnings, looking model coefficients shows estimate effect herd H4 estimable. happens model matrix full rank. understand , look following graphical view data levelplot:  con_view() function following: Plots levelplot/heatmap two factors, cell color corresponding value response variable. Counts number cells row puts count right axis. Column counts added along top axis. Sorts rows columns (default) according clustering incidence matrix based presence/absence data cell graph. Checks connectivity two factors. observations connected, cells belonging connected subset identified number. graphical view shows us herds H1 H3 levels genotype factor common herds H2 H4, makes sense herd effects estimable.","code":"library(connected) data_fernando #>   gen herd #> 1  G2   H1 #> 2  G1   H1 #> 3  G1   H3 #> 4  G6   H3 #> 5  G3   H2 #> 6  G4   H2 #> 7  G5   H2 #> 8  G5   H4 #> 9  G7   H4 set.seed(42) data_fernando <- transform(data_fernando, y = rnorm(nrow(data_fernando), mean=100)) m1 <- lm(y ~ gen + herd, data=data_fernando) m1 #>  #> Call: #> lm(formula = y ~ gen + herd, data = data_fernando) #>  #> Coefficients: #> (Intercept)        genG2        genG3        genG4        genG5        genG6   #>     99.4353       1.9357      -0.6372      -1.1476       0.4700       0.2697   #>       genG7       herdH2       herdH3       herdH4   #>      2.5831       1.6062       0.9278           NA con_view(data_fernando, y ~ gen * herd, main=\"data_fernando\") #> Warning in con_view(data_fernando, y ~ gen * herd, main = \"data_fernando\"): #> There are 2 groups"},{"path":"https://kwstat.github.io/connected/articles/introduction_to_the_connected_package.html","id":"checking-multi-way-connectedness-with-con_check","dir":"Articles","previous_headings":"","what":"Checking multi-way connectedness with con_check()","title":"Introduction to the 'connected' package","text":"two-way heatmaps previous section useful understand connectedness two factors, two factors? small example dataset Eccleston Russell (1975) three factors can represent 4x4 row-column experiment treatment cell. treatment codes letter number used previously-published scientific papers. treatment letter corresponds one number vice versa. Re-arranging treatments field layout rows columns useful: 4x4 grid completely filled, row column factors obviously connected. little bit study, can seen columns also connected via treatments. example treatment A1 appears columns 1 & 3, treatment B2 connects columns 3 & 2, D4 connects columns 2 & 4, C3 connects columns 4 & 1. connection treatments columns can checked formally con_check() function: vector 1s returned means observations dataframe connected group 1. Similarly, rows also connected via treatments. However, 3 factors considered time, completely disconnected observation belonging separate group. attempted fit linear model using 3 factors predictors, problems estimability. Another way examine stability model look reciprocal condition number model matrix, less machine precision, numerically singular.","code":"data_eccleston #>    row col trt #> 1    1   1  A1 #> 2    1   2  B2 #> 3    1   3  E5 #> 4    1   4  F6 #> 5    2   1  C3 #> 6    2   2  D4 #> 7    2   3  G7 #> 8    2   4  H8 #> 9    3   1  H8 #> 10   3   2  F6 #> 11   3   3  A1 #> 12   3   4  C3 #> 13   4   1  G7 #> 14   4   2  E5 #> 15   4   3  B2 #> 16   4   4  D4 ## library(reshape2) ## acast(data_eccleston, row~col, value.var='trt') ##    1  2  3  4  ##  1 A1 B2 E5 F6 ##  2 C3 D4 G7 H8 ##  3 H8 F6 A1 C3 ##  4 G7 E5 B2 D4 con_check(data_eccleston, ~ trt + col) #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> Levels: 1 con_check(data_eccleston, ~ trt + row) #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> Levels: 1 con_check(data_eccleston, ~ trt + row + col) #>  [1] 16 1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 #> Levels: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 set.seed(42) data_eccleston <- transform(data_eccleston,                             y = rnorm(nrow(data_eccleston), mean=100)) m1 <- lm(y ~ trt + row + col, data=data_eccleston) m1 #>  #> Call: #> lm(formula = y ~ trt + row + col, data = data_eccleston) #>  #> Coefficients: #> (Intercept)        trtB2        trtC3        trtD4        trtE5        trtF6   #>   100.78962     -0.18428     -0.11760      0.30450      0.20690     -0.72684   #>       trtG7        trtH8         row2         row3         row4         col2   #>    -0.22508     -0.50118     -0.06302      1.09660     -0.94338     -0.96532   #>        col3         col4   #>          NA      0.31332 X <- model.matrix(m1) rcond(X) #> [1] 1.311474e-17 .Machine$double.eps #> [1] 2.220446e-16"},{"path":"https://kwstat.github.io/connected/articles/introduction_to_the_connected_package.html","id":"improving-connectedness-with-con_filter","dir":"Articles","previous_headings":"","what":"Improving connectedness with con_filter()","title":"Introduction to the 'connected' package","text":"Sometimes two factors dataframe can weakly connected might want remove weak connections.","code":""},{"path":"https://kwstat.github.io/connected/articles/introduction_to_the_connected_package.html","id":"example-1","dir":"Articles","previous_headings":"Improving connectedness with con_filter()","what":"Example 1","title":"Introduction to the 'connected' package","text":"construct small example use tabyl function display data two-way table. two-way table easy see gen factor level G3 1 cell connecting state factor. might want eliminate column genotype G3. ordinary way use one approaches: generalize idea filtering new two-way filtering using con_filter() function. easiest way think function two-way table shown , define threshold minimum number connections two factors. example, might decide keep level gen appears least 2 states. use formula syntax . default, con_filter() function provides bit diagnostic information. filtering, notice state S3 appears decide want keep individual state least 2 gen.","code":"tab <- data.frame(gen=c(\"G1\",\"G1\",\"G1\",\"G1\", \"G2\",\"G2\",\"G2\", \"G3\"),                   state=c(\"S1\",\"S2\",\"S3\",\"S4\", \"S1\",\"S2\",\"S4\", \"S1\")) library(janitor) # For tabyl #>  #> Attaching package: 'janitor' #> The following objects are masked from 'package:stats': #>  #>     chisq.test, fisher.test tab %>% tabyl(state,gen) #>  state G1 G2 G3 #>     S1  1  1  1 #>     S2  1  1  0 #>     S3  1  0  0 #>     S4  1  1  0 subset(tab, gen != \"G3\") %>% tabyl(state,gen) #>  state G1 G2 #>     S1  1  1 #>     S2  1  1 #>     S3  1  0 #>     S4  1  1 dplyr::filter(tab, gen != \"G3\") %>% tabyl(state,gen) #>  state G1 G2 #>     S1  1  1 #>     S2  1  1 #>     S3  1  0 #>     S4  1  1 # Read this as \"2 state per gen\" tab2 <- con_filter(tab, ~ 2 * state / gen) #> Dropping these 1 of 3 levels of gen: #> [1] \"G3\" #> Deleted 1 of 8 rows of data. #> Warning in con_filter(tab, ~2 * state/gen): Some state have only 1 gen. tab2 %>% tabyl(state,gen) #>  state G1 G2 #>     S1  1  1 #>     S2  1  1 #>     S3  1  0 #>     S4  1  1 con_filter(tab2, ~ 2 * gen / state) %>% tabyl(state, gen) #> Dropping these 1 of 4 levels of state: #> [1] \"S3\" #> Deleted 1 of 7 rows of data. #>  state G1 G2 #>     S1  1  1 #>     S2  1  1 #>     S4  1  1"},{"path":"https://kwstat.github.io/connected/articles/introduction_to_the_connected_package.html","id":"example-2---missing-response-values","dir":"Articles","previous_headings":"Improving connectedness with con_filter()","what":"Example 2 - Missing response values","title":"Introduction to the 'connected' package","text":"R dataset OrchardSprays example Latin Square experiment 8 rows, 8 columns, 8 treatments. Suppose experiment, half response variable data lost. simulate : order visualize combinations rows columns still data, remove missing observations constructing table cell counts: con_filter() formula syntax can include response variable. response variable specified, data first filtered remove missing values response, two-way filtering performed. Suppose want least 2 observed values decrease row column desired result achieved.","code":"set.seed(42)   orch <- OrchardSprays   orch[runif(nrow(orch)) > .5 , \"decrease\"] <- NA   head(orch) #>   decrease rowpos colpos treatment #> 1       NA      1      1         D #> 2       NA      2      1         E #> 3        8      3      1         B #> 4       NA      4      1         H #> 5       NA      5      1         G #> 6       NA      6      1         F subset(orch, !is.na(decrease)) %>% tabyl(rowpos, colpos)  #>  rowpos 1 2 3 4 5 6 7 8 #>       1 0 0 0 1 1 1 0 0 #>       2 0 0 1 0 0 1 0 1 #>       3 1 1 1 1 1 1 1 1 #>       4 0 0 0 0 0 0 1 0 #>       5 0 0 0 1 1 1 1 0 #>       6 0 1 1 0 1 0 0 0 #>       7 0 1 0 0 0 0 1 0 #>       8 1 0 0 0 0 0 0 0 # Read: decrease has at least 2 colpos per rowps orch2 <- con_filter(orch, decrease ~ 2 * colpos / rowpos) #> Dropping these 2 of 8 levels of rowpos: #> [1] \"4\" \"8\" #> Deleted 2 of 25 rows of data. #> Warning in con_filter(orch, decrease ~ 2 * colpos/rowpos): Some colpos have #> only 1 rowpos. tabyl(orch2, rowpos, colpos) # Column 1 has only 1 observation #>  rowpos 1 2 3 4 5 6 7 8 #>       1 0 0 0 1 1 1 0 0 #>       2 0 0 1 0 0 1 0 1 #>       3 1 1 1 1 1 1 1 1 #>       5 0 0 0 1 1 1 1 0 #>       6 0 1 1 0 1 0 0 0 #>       7 0 1 0 0 0 0 1 0  # Read: decrease has at least 2 rowpos per colpos orch2 <- con_filter(orch2, decrease ~ 2 * rowpos / colpos) #> Dropping these 1 of 8 levels of colpos: #> [1] \"1\" #> Deleted 1 of 23 rows of data. tabyl(orch2, rowpos, colpos) #>  rowpos 2 3 4 5 6 7 8 #>       1 0 0 1 1 1 0 0 #>       2 0 1 0 0 1 0 1 #>       3 1 1 1 1 1 1 1 #>       5 0 0 1 1 1 1 0 #>       6 1 1 0 1 0 0 0 #>       7 1 0 0 0 0 1 0"},{"path":"https://kwstat.github.io/connected/articles/introduction_to_the_connected_package.html","id":"example-3---concatenating-two-factors","dir":"Articles","previous_headings":"Improving connectedness with con_filter()","what":"Example 3 - Concatenating two factors","title":"Introduction to the 'connected' package","text":"Sometimes might want combine two factors together filtering. Consider following example factor genotype gen, state, year. simulate random response data. shown previous sections, can check/filter gen:state gen:year factors, perhaps interested fitting model three-way interaction gen:state:year. One way trim type data combine state:year interaction single factor count number genotypes new factor. con_filter() function can perform concatenation two factors automatically using : operator. Looking results, can see column one level new state:year factor column least 2 genotypes, asked . ever want see data dropped filtering process, returndropped=TRUE argument can used.","code":"library(connected) library(janitor) test1 <- matrix( c(\"G1\", \"IA\", \"2020\", # gen has 1 state, 1 yr,                    \"G2\", \"IA\", \"2020\", # gen has 1 state, 2 yr                    \"G2\", \"IA\", \"2021\",                    \"G3\", \"NE\", \"2020\", # 2 states, 1 yr                    \"G3\", \"IA\", \"2020\",                    \"G4\", \"KS\", \"2020\", # state has 1 gen, 1 yr                    \"G5\", \"MO\", \"2020\", # state has 1 gen, 2yr                    \"G5\", \"MO\", \"2021\",                    \"G6\", \"IL\", \"2020\", # state has 2 gen, 1yr                    \"G7\", \"IL\", \"2020\",                    \"G8\", \"AR\", \"2019\", # year has 1 gen 1 state                    \"G9\", \"IN\", \"2018\", # year has 1 gen, 2 state                    \"G9\", \"OH\", \"2018\",                    \"G10\", \"MN\", \"2017\", # year has 2 gen, 1 state                    \"G11\", \"MN\", \"2017\",                    \"G12\", \"MD\", \"2010\", # gen has 2 state, 2 yr, 2 reps                    \"G12\", \"MD\", \"2010\",                    \"G12\", \"GA\", \"2011\",                    \"G12\", \"GA\", \"2011\"), byrow=TRUE, ncol=3) test1 <- as.data.frame(test1) colnames(test1) <- c(\"gen\",\"state\",\"year\")  set.seed(42) test1$y <- round( runif(nrow(test1)), 2) head(test1) #>   gen state year    y #> 1  G1    IA 2020 0.91 #> 2  G2    IA 2020 0.94 #> 3  G2    IA 2021 0.29 #> 4  G3    NE 2020 0.83 #> 5  G3    IA 2020 0.64 #> 6  G4    KS 2020 0.52 con_filter(test1, y ~ 2 * gen / state:year) |>   transform(stateyr=paste0(state,\"_\",year)) |>   tabyl(gen,stateyr) #> Dropping these 10 of 13 levels of state:year: #>  [1] \"AR2019\" \"GA2011\" \"IA2021\" \"IN2018\" \"KS2020\" \"MD2010\" \"MO2020\" \"MO2021\" #>  [9] \"NE2020\" \"OH2018\" #> Deleted 12 of 19 rows of data. #> Warning in con_filter(test1, y ~ 2 * gen/state:year): Some gen have only 1 #> state:year. #>  gen IA_2020 IL_2020 MN_2017 #>   G1       1       0       0 #>  G10       0       0       1 #>  G11       0       0       1 #>   G2       1       0       0 #>   G3       1       0       0 #>   G6       0       1       0 #>   G7       0       1       0 con_filter(test1, y ~ 2 * gen / state:year, returndropped=TRUE) #> Dropping these 10 of 13 levels of state:year: #>  [1] \"AR2019\" \"GA2011\" \"IA2021\" \"IN2018\" \"KS2020\" \"MD2010\" \"MO2020\" \"MO2021\" #>  [9] \"NE2020\" \"OH2018\" #> Deleted 7 of 19 rows of data. #> Warning in con_filter(test1, y ~ 2 * gen/state:year, returndropped = TRUE): #> Some gen have only 1 state:year. #>    gen state year    y #> 3   G2    IA 2021 0.29 #> 4   G3    NE 2020 0.83 #> 6   G4    KS 2020 0.52 #> 7   G5    MO 2020 0.74 #> 8   G5    MO 2021 0.13 #> 11  G8    AR 2019 0.46 #> 12  G9    IN 2018 0.72 #> 13  G9    OH 2018 0.93 #> 16 G12    MD 2010 0.94 #> 17 G12    MD 2010 0.98 #> 18 G12    GA 2011 0.12 #> 19 G12    GA 2011 0.47"},{"path":"https://kwstat.github.io/connected/articles/introduction_to_the_connected_package.html","id":"example-4-case-study-estimating-variance-components","dir":"Articles","previous_headings":"","what":"Example 4: Case study: Estimating variance components","title":"Introduction to the 'connected' package","text":"Sometimes observations dataset may connected, factor levels may weak connections might good idea remove weak connections. example, documentation ASRtrials package helpful analysis genotype--environment data, Gezan et al. (2022) write: “general, recommend minimum 5 genotypes common pair trials.” Ultimately, decide much connection want factors. following example shows use con_filter() function remove weak connections levels factors. plant breeding, one things people like look much variation data explained differences genotypes, years, locations, typically abbreviated GxYxL. order perform calculation, must least locations repeated across years. agridat package nice example dataset barley testing Minnesota. 6 locations across 49 years 235 different genotypes. 69090 combinations 3 factors, 2083 combinations yield values, great deal sparsity data. Nonetheless, can jump right try fit full mixed model combinations factors. analysis runs without obvious problems may perfectly acceptable, keeping mind comments connectedness , may want remove data two-way filtering. First, start two-way visualization sites years.  1893 1917, barley testing happened St. Paul site (near University Minnesota). Since possible explain much variation across locations 1 location, makes sense eliminate data years 1 site.  Looking across top, 1s tell us genotypes tested 1 year, really helping estimate variation across years decide drop .  considering genotypes spread across years, can also look genotypes spread across sites.  looking numbers across top axis, genotypes tested 1 site, drop .  check connectedness pair factors.    connectedness genotype year still bit weak, pairs factors good connections, try fit variance components model . lmer function fails converge, variance components look reasonable also asreml giving estimates (shown ), probably convergence criterion lmer quite satisfied essentially near maximum likelihood. Changing convergence criteria might helpful, can also try increasing connectedness genotype year, since noticed genotypes tested 2 years. Change require minimum 3 years testing: Now lmer converges without warnings. compare estimated variance parameters initial model m0 (n=2083 observations) model m1 final model m2 (n=1252 observations). CAUTION: VarCorr function re-orders terms output, careful combining two tables. biggest change variance components happens gen, decreases 46 9. particularly surprising. full dataset, genotypes tested trials. genotypes easily poorly performing regional check varieties serious candidates advancement testing. either case, genotypes variable genotypes data. speculating, based degree personal experience. thing note similarity variance parameters models m1 m2. similarity strengthens belief model m1 failed converge, likely near optimum likelihood.","code":"library(agridat) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  dat0 <- agridat::minnesota.barley.yield if(nrow(dat0) < 2083) stop(\"Please upgrade the agridat package.\") dat0 <- mutate(dat0, gen=factor(gen), site=factor(site), year=factor(year)) library(lme4) #> Loading required package: Matrix m0 <- lmer(yield ~ (1|gen) + (1|site) + (1|year) +               (1|gen:site) + (1|gen:year) + (1|site:year) + (1|gen:site:year),            data=dat0) summary(m0) #> Linear mixed model fit by REML ['lmerMod'] #> Formula: yield ~ (1 | gen) + (1 | site) + (1 | year) + (1 | gen:site) +   #>     (1 | gen:year) + (1 | site:year) + (1 | gen:site:year) #>    Data: dat0 #>  #> REML criterion at convergence: 14327 #>  #> Scaled residuals:  #>      Min       1Q   Median       3Q      Max  #> -1.17872 -0.16019 -0.00281  0.16630  1.21505  #>  #> Random effects: #>  Groups        Name        Variance Std.Dev. #>  gen:site:year (Intercept) 24.6416  4.9640   #>  gen:year      (Intercept)  9.8795  3.1432   #>  gen:site      (Intercept)  0.8261  0.9089   #>  gen           (Intercept) 45.9856  6.7813   #>  site:year     (Intercept) 89.0064  9.4343   #>  year          (Intercept) 38.0930  6.1719   #>  site          (Intercept) 42.1995  6.4961   #>  Residual                   2.6587  1.6306   #> Number of obs: 2083, groups:   #> gen:site:year, 2079; gen:year, 1056; gen:site, 429; gen, 235; site:year, 164; year, 49; site, 6 #>  #> Fixed effects: #>             Estimate Std. Error t value #> (Intercept)   34.691      3.047   11.38  # Note, the asreml package gives the same estimates. Not shown. # library(asreml) # m0a <- asreml(yield ~ 1, data=dat0, random  = ~ gen*site*year, workspace=\"1GB\") # summary(m0a)$varcomp # Keep the original data in dat0 and pruned data in dat1 dat1 <- dat0  con_view(dat1, yield~site*year, cluster=FALSE,          xlab=\"site\", ylab=\"year\", main=\"Minnesota Barley\") # Require 2 sites per year dat1 <- con_filter(dat1, yield ~ 2*site/year) #> Dropping these 25 of 49 levels of year: #>  [1] \"1893\" \"1894\" \"1895\" \"1896\" \"1897\" \"1898\" \"1899\" \"1900\" \"1901\" \"1902\" #> [11] \"1903\" \"1904\" \"1905\" \"1906\" \"1907\" \"1908\" \"1909\" \"1910\" \"1911\" \"1912\" #> [21] \"1913\" \"1914\" \"1915\" \"1916\" \"1917\" #> Deleted 731 of 2083 rows of data. con_view(dat1, yield~gen*year, cluster=FALSE,          xlab=\"genotype\", ylab=\"year\") # Require 2 year per gen dat1 <- con_filter(dat1, yield~ 2*year/gen) #> Dropping these 15 of 62 levels of gen: #>  [1] \"241\"  \"244\"  \"558\"  \"611\"  \"2793\" \"2899\" \"2928\" \"4668\" \"4669\" \"7010\" #> [11] \"7011\" \"7012\" \"7013\" \"7014\" \"7015\" #> Deleted 50 of 1352 rows of data. con_view(dat1, yield~gen*year, cluster=FALSE, xlab=\"gen\", ylab=\"year\") con_view(dat1, yield~gen*site, cluster=FALSE, xlab=\"genotype\", ylab=\"site\") # Drop genotypes tested in only 1 site dat1 <- con_filter(dat1, yield~ 2*site/gen) #> Dropping these 10 of 47 levels of gen: #>  [1] \"531\"  \"835\"  \"912\"  \"915\"  \"923\"  \"1145\" \"2947\" \"3144\" \"4115\" \"4116\" #> Deleted 25 of 1302 rows of data. con_view(dat1, yield~gen*site, cluster=FALSE, xlab=\"genotype\", ylab=\"site\") con_view(dat1, yield ~ gen*site, cluster=FALSE, xlab=\"gen\", ylab=\"site\") con_view(dat1, yield ~ gen*year, cluster=FALSE, xlab=\"gen\", ylab=\"year\") con_view(dat1, yield ~ site*year, cluster=FALSE, xlab=\"site\", ylab=\"year\") library(lme4) m1 <- lmer(yield ~ (1|gen) + (1|site) + (1|year) +            (1|gen:site) + (1|gen:year) + (1|site:year) + (1|gen:site:year), data=dat1) summary(m1) #> Linear mixed model fit by REML ['lmerMod'] #> Formula: yield ~ (1 | gen) + (1 | site) + (1 | year) + (1 | gen:site) +   #>     (1 | gen:year) + (1 | site:year) + (1 | gen:site:year) #>    Data: dat1 #>  #> REML criterion at convergence: 8434 #>  #> Scaled residuals:  #>      Min       1Q   Median       3Q      Max  #> -1.12837 -0.16942 -0.00168  0.17680  1.33933  #>  #> Random effects: #>  Groups        Name        Variance Std.Dev. #>  gen:site:year (Intercept) 21.971   4.687    #>  gen:year      (Intercept)  3.625   1.904    #>  gen:site      (Intercept)  1.280   1.132    #>  site:year     (Intercept) 87.412   9.349    #>  gen           (Intercept)  9.166   3.028    #>  year          (Intercept) 37.412   6.117    #>  site          (Intercept) 40.747   6.383    #>  Residual                   2.163   1.471    #> Number of obs: 1277, groups:   #> gen:site:year, 1274; gen:year, 285; gen:site, 187; site:year, 139; gen, 37; year, 24; site, 6 #>  #> Fixed effects: #>             Estimate Std. Error t value #> (Intercept)   36.751      3.055   12.03  # asreml converges to the same estimated values, so lmer is just finnicky # m1a <- asreml(yield ~ 1, data=dat1, random  = ~ gen*site*year, workspace=\"1GB\") # lucid::vc(m1a) # Require at least 3 year per genotype dat2 <- con_filter(dat1, yield ~ 3*year / gen) #> Dropping these 3 of 37 levels of gen: #> [1] \"1189\" \"1478\" \"5673\" #> Deleted 25 of 1277 rows of data. m2 <- lmer(yield ~ (1|gen) + (1|site) + (1|year) +              (1|gen:site) + (1|gen:year) + (1|site:year) + (1|gen:site:year),            data=dat2) summary(m2) #> Linear mixed model fit by REML ['lmerMod'] #> Formula: yield ~ (1 | gen) + (1 | site) + (1 | year) + (1 | gen:site) +   #>     (1 | gen:year) + (1 | site:year) + (1 | gen:site:year) #>    Data: dat2 #>  #> REML criterion at convergence: 8281.1 #>  #> Scaled residuals:  #>      Min       1Q   Median       3Q      Max  #> -1.12068 -0.16831 -0.00262  0.17584  1.32712  #>  #> Random effects: #>  Groups        Name        Variance Std.Dev. #>  gen:site:year (Intercept) 22.114   4.703    #>  gen:year      (Intercept)  3.696   1.923    #>  gen:site      (Intercept)  1.272   1.128    #>  site:year     (Intercept) 87.468   9.352    #>  gen           (Intercept)  9.200   3.033    #>  year          (Intercept) 37.330   6.110    #>  site          (Intercept) 41.740   6.461    #>  Residual                   2.156   1.468    #> Number of obs: 1252, groups:   #> gen:site:year, 1249; gen:year, 279; gen:site, 173; site:year, 139; gen, 34; year, 24; site, 6 #>  #> Fixed effects: #>             Estimate Std. Error t value #> (Intercept)   36.912      3.084   11.97  # asreml gives the same estimated variance parameters. Not shown. # m2a <- asreml(yield ~ 1, data=dat2, random  = ~ gen*site*year, workspace=\"1GB\") # summary(m2a)$varcomp library(lucid) full_join( select(as.data.frame(VarCorr(m0)), grp, vcov),             select(as.data.frame(VarCorr(m1)), grp, vcov),             by=\"grp\", suffix=c(\".0\",\".1\")) %>%   full_join(select(as.data.frame(VarCorr(m2)), grp, vcov),             by=\"grp\", suffix=c(\".0\",\".2\")) %>% lucid #>             grp vcov.0 vcov.1  vcov #> 1 gen:site:year 24.6    22    22.1  #> 2      gen:year  9.88    3.63  3.7  #> 3      gen:site  0.826   1.28  1.27 #> 4           gen 46       9.17  9.2  #> 5     site:year 89      87.4  87.5  #> 6          year 38.1    37.4  37.3  #> 7          site 42.2    40.7  41.7  #> 8      Residual  2.66    2.16  2.16"},{"path":[]},{"path":"https://kwstat.github.io/connected/articles/introduction_to_the_connected_package.html","id":"how-to-extract-the-sorted-axis-tick-labels-from-the-levelplot","dir":"Articles","previous_headings":"Appendix - Infrequently Asked Questions","what":"1. How to extract the sorted axis tick labels from the levelplot","title":"Introduction to the 'connected' package","text":"want extract sorted axis tick labels, assign graphic object extract components interest:","code":"library(connected) dat <- data_fernando dat <- transform(dat, y = rnorm(nrow(dat))) tmp <- con_view(dat, y ~ gen*herd) #> Warning in con_view(dat, y ~ gen * herd): There are 2 groups tmp$x.limits[[1]] #> [1] \"G6\" \"G1\" \"G2\" \"G7\" \"G5\" \"G3\" \"G4\" tmp$y.limits[[1]] #> [1] \"H1\" \"H3\" \"H2\" \"H4\""},{"path":"https://kwstat.github.io/connected/articles/introduction_to_the_connected_package.html","id":"how-to-create-consistent-axis-tick-labels-across-multiple-datasets","dir":"Articles","previous_headings":"Appendix - Infrequently Asked Questions","what":"2. How to create consistent axis tick labels across multiple datasets","title":"Introduction to the 'connected' package","text":"user wanted axis tick labels across several different datasets, even though datasets might different factor levels. First create two small datasets. Note levels G2 E2 common datasets. Next, create reference dataframe contains factor levels dd1 dd2. Merge trait values dataframe. plotting, sure use dropNA=FALSE options factor levels without trait values kept use cluster=FALSE prevent re-ordering","code":"dd1 <- data.frame(x=rep(c(\"E1\",\"E2\"),2),                   y=rep(c(\"G1\",\"G2\"), each=2),                   z1=c(1,2,1.5,2.5)) dd2 <- data.frame(x=rep(c(\"E3\",\"E2\"),2),                   y=rep(c(\"G3\",\"G2\"), each=2),                   z2=c(3,4,3.5,4.5)) dd1 #>    x  y  z1 #> 1 E1 G1 1.0 #> 2 E2 G1 2.0 #> 3 E1 G2 1.5 #> 4 E2 G2 2.5 dd2 #>    x  y  z2 #> 1 E3 G3 3.0 #> 2 E2 G3 4.0 #> 3 E3 G2 3.5 #> 4 E2 G2 4.5 dd0 <- expand.grid(x=sort(unique(c(dd1$x, dd2$x))),                    y=sort(unique(c(dd1$y, dd2$y))) ) dd0 <- merge(dd0, dd1, by=c(\"x\",\"y\"), all.x=TRUE) dd0 <- merge(dd0, dd2, by=c(\"x\",\"y\"), all.x=TRUE) library(connected) con_view(dd0, z1 ~ x * y, cluster=FALSE, dropNA=FALSE, main=\"dd1\") con_view(dd0, z2 ~ x * y, cluster=FALSE, dropNA=FALSE, main=\"dd2\")"},{"path":"https://kwstat.github.io/connected/articles/introduction_to_the_connected_package.html","id":"how-to-view-the-axis-labels-andor-cell-group-numbers-when-there-are-many-levels","dir":"Articles","previous_headings":"Appendix - Infrequently Asked Questions","what":"3. How to view the axis labels and/or cell group numbers when there are many levels","title":"Introduction to the 'connected' package","text":"best strategy send graphical output pdf file experiment cex arguments con_view() reduce -plotting. open file good pdf viewer can zoom search text.","code":""},{"path":"https://kwstat.github.io/connected/articles/introduction_to_the_connected_package.html","id":"bibliography","dir":"Articles","previous_headings":"","what":"Bibliography","title":"Introduction to the 'connected' package","text":"Eccleston, J. K. Russell (1975). Connectedness orthogonality multi-factor designs. Biometrika, 62, 341-345. https://doi.org/10.1093/biomet/62.2.341 Fernando, Rohan D. Gianola M. Grossman (1983). Identifying Connected Subsets Two-Way Classification Without Interaction. J. Dairy Science, 66, 1399-1402. Table 1. https://doi.org/10.3168/jds.S0022-0302(83)81951-1 Gezan, Salvador . Giovanni Galli Darren Murray (2022). User’s Manual ASRtriala v. 1.0.0. Published VSNi. https://vsni.co.uk/resources/free-software/asrtriala/ Piepho, Hans-Peter. (1994) Missing observations analysis stability. Heredity, 72, 141–145. https://doi.org/10.1038/hdy.1994.20","code":""},{"path":"https://kwstat.github.io/connected/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kevin Wright. Author, maintainer.","code":""},{"path":"https://kwstat.github.io/connected/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wright K (2025). connected: Visualize Improve Connectedness Factors Tables. R package version 0.2, https://kwstat.github.io/connected/.","code":"@Manual{,   title = {connected: Visualize and Improve Connectedness of Factors in Tables},   author = {Kevin Wright},   year = {2025},   note = {R package version 0.2},   url = {https://kwstat.github.io/connected/}, }"},{"path":"https://kwstat.github.io/connected/index.html","id":"connected","dir":"","previous_headings":"","what":"Visualize and Improve Connectedness of Factors in Tables","title":"Visualize and Improve Connectedness of Factors in Tables","text":"Tools visualize improve connectedness tables","code":""},{"path":"https://kwstat.github.io/connected/reference/con_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Check connectedness of multiple factors in a dataframe — con_check","title":"Check connectedness of multiple factors in a dataframe — con_check","text":"Multiple factors dataframe said connected model matrix based factors full rank. function provides formula interface lfe::compfactor function check connectedness.","code":""},{"path":"https://kwstat.github.io/connected/reference/con_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check connectedness of multiple factors in a dataframe — con_check","text":"","code":"con_check(data, formula, WW = TRUE)"},{"path":"https://kwstat.github.io/connected/reference/con_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check connectedness of multiple factors in a dataframe — con_check","text":"data dataframe formula formula multiple factor names dataframe. WW Pass-argument compfactor.","code":""},{"path":"https://kwstat.github.io/connected/reference/con_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check connectedness of multiple factors in a dataframe — con_check","text":"vector integers representing group membership observation.","code":""},{"path":"https://kwstat.github.io/connected/reference/con_check.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Check connectedness of multiple factors in a dataframe — con_check","text":"None","code":""},{"path":"https://kwstat.github.io/connected/reference/con_check.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check connectedness of multiple factors in a dataframe — con_check","text":"Kevin Wright","code":""},{"path":"https://kwstat.github.io/connected/reference/con_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check connectedness of multiple factors in a dataframe — con_check","text":"","code":"if (FALSE) { # \\dontrun{ # In the data_eccleston dataframe, each pair of factors is connected. con_check(data_eccleston, ~ row + trt) con_check(data_eccleston, ~ col + trt) con_check(data_eccleston, ~ row + col) # But all three factors are COMPLETELY disconnected into 16 groups. con_check(data_eccleston, ~ row + col + trt) } # }"},{"path":"https://kwstat.github.io/connected/reference/con_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a dataframe using two-way criteria to increase connectedness — con_filter","title":"Filter a dataframe using two-way criteria to increase connectedness — con_filter","text":"Traditional filtering (subsetting) data typically performed via criteria based columns data. contrast, function performs filtering data based joint rows columns matrix-view two factors. Conceptually, idea re-shape two three columns dataframe matrix, delete entire rows (columns) matrix many missing cells row (column). two useful applications two-way filtering : Remove factor level interactions another factor. especially useful mixed models remove rare factor combinations. Remove factor level missing interactions another factor. especially useful biplots matrix remove rows columns missing values. formula syntax used specify two-way filtering criteria. examples may provide easiest understanding. dat <- data.frame(state=c(\"NE\",\"NE\", \"IA\", \"NE\", \"IA\"), year=c(1,2,2,3,3), value=11:15) 'value' column re-shaped matrix looks like: state/year |  1 |  2 |  3 | NE | 11 | 12 | 14 | IA |    | 13 | 15 | Drop states much missing combinations. Keep states \"least 3 years per state\" con_filter(dat, ~ 3 * year / state) NE    1    11 NE    2    12 NE    3    14 Keep years \"least 2 states per year\" con_filter(dat, ~ 2 * state / year) NE    2    12 IA    2    13 NE    3    14 IA    3    15 constant number formula less 1.0, interpreted fraction. Keep states \"least 75% years per state\" con_filter(dat, ~ .75 * year / state) possible include another factor either side slash \"/\". Suppose data another factor political party called \"party\". Keep states \"least 2 combinations party:year per state\" con_filter(dat, ~ 2 * party:year / state) formula contains response variable, missing values dropped first, two-way filtering based factor combinations. con_filter(dat, value ~ 2 * state / year)","code":""},{"path":"https://kwstat.github.io/connected/reference/con_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a dataframe using two-way criteria to increase connectedness — con_filter","text":"","code":"con_filter(data, formula, verbose = TRUE, returndropped = FALSE)"},{"path":"https://kwstat.github.io/connected/reference/con_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a dataframe using two-way criteria to increase connectedness — con_filter","text":"data dataframe. formula formula specifies criteria filtering. verbose TRUE, print diagnostic information data deleted. (Similar 'tidylog' package). returndropped TRUE, return dropped rows instead kept rows. Default FALSE.","code":""},{"path":"https://kwstat.github.io/connected/reference/con_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a dataframe using two-way criteria to increase connectedness — con_filter","text":"original dataframe returned, minus rows filtered .","code":""},{"path":"https://kwstat.github.io/connected/reference/con_filter.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Filter a dataframe using two-way criteria to increase connectedness — con_filter","text":"None.","code":""},{"path":"https://kwstat.github.io/connected/reference/con_filter.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter a dataframe using two-way criteria to increase connectedness — con_filter","text":"Kevin Wright","code":""},{"path":"https://kwstat.github.io/connected/reference/con_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter a dataframe using two-way criteria to increase connectedness — con_filter","text":"","code":"dat <- data.frame(   gen = c(\"G3\", \"G4\", \"G1\", \"G2\", \"G3\", \"G4\", \"G5\",           \"G1\", \"G2\", \"G3\", \"G4\", \"G5\",           \"G1\", \"G2\", \"G3\", \"G4\", \"G5\",           \"G1\", \"G2\", \"G3\", \"G4\", \"G5\"),   env = c(\"E1\", \"E1\", \"E1\", \"E1\", \"E1\", \"E1\", \"E1\",           \"E2\", \"E2\", \"E2\", \"E2\", \"E2\",           \"E3\", \"E3\", \"E3\", \"E3\", \"E3\",           \"E4\", \"E4\", \"E4\", \"E4\", \"E4\"),   yield = c(65, 50, NA, NA, 65, 50, 60,             NA, 71, 76, 80, 82,             90, 93, 95, 102, 97,             98, 102, 105, 130, 135))  # How many observations are there for each combination of gen*env? with( subset(dat, !is.na(yield)) , table(gen,env) ) #>     env #> gen  E1 E2 E3 E4 #>   G1  0  0  1  1 #>   G2  0  1  1  1 #>   G3  2  1  1  1 #>   G4  2  1  1  1 #>   G5  1  1  1  1  # Note, if there is no response variable, the two-way filtering is based # only on the presence of the factor combinations. dat1 <- con_filter(dat, ~ 4*env / gen) #> Deleted 0 of 22 rows of data.  # If there is a response variable, missing values are dropped first, # then the two-way filtering is based on the factor combinations.  dat1 <- con_filter(dat, yield ~ 4*env/gen) #> Dropping these 2 of 5 levels of gen: #> [1] \"G1\" \"G2\" #> Deleted 5 of 19 rows of data. dat1 <- con_filter(dat, yield ~ 5*env/ gen) #> Dropping these 5 of 5 levels of gen: #> [1] \"G1\" \"G2\" \"G3\" \"G4\" \"G5\" #> Deleted 19 of 19 rows of data. #> Warning: No data remains. dat1 <- con_filter(dat, yield ~ 6*gen/ env) #> Dropping these 4 of 4 levels of env: #> [1] \"E1\" \"E2\" \"E3\" \"E4\" #> Deleted 19 of 19 rows of data. #> Warning: No data remains. dat1 <- con_filter(dat, yield ~ .8 *env / gen) #> Dropping these 2 of 5 levels of gen: #> [1] \"G1\" \"G2\" #> Deleted 5 of 19 rows of data. dat1 <- con_filter(dat, yield ~ .8* gen / env) #> Dropping these 1 of 4 levels of env: #> [1] \"E1\" #> Deleted 5 of 19 rows of data. dat1 <- con_filter(dat, yield ~ 7 * env / gen) #> Dropping these 5 of 5 levels of gen: #> [1] \"G1\" \"G2\" \"G3\" \"G4\" \"G5\" #> Deleted 19 of 19 rows of data. #> Warning: No data remains."},{"path":"https://kwstat.github.io/connected/reference/con_view.html","id":null,"dir":"Reference","previous_headings":"","what":"View connectedness of two factors in a dataframe with a levelplot — con_view","title":"View connectedness of two factors in a dataframe with a levelplot — con_view","text":"replication treatment combination cells a2 two-way table, replications averaged together (counted) constructing heatmap. default, rows columns clustered using 'incidence' matrix 0s 1s. function checks see cells heatmap form connected set.  , data divided connected subsets subset group number shown within cell. default, missing values response deleted.","code":""},{"path":"https://kwstat.github.io/connected/reference/con_view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View connectedness of two factors in a dataframe with a levelplot — con_view","text":"","code":"con_view(   data,   formula,   fun.aggregate = mean,   na.rm = TRUE,   xlab = \"\",   ylab = \"\",   cex.num = 0.75,   cex.x = 0.7,   cex.y = 0.7,   col.regions = RedGrayBlue,   cluster = \"incidence\",   dropNA = TRUE,   ... )"},{"path":"https://kwstat.github.io/connected/reference/con_view.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View connectedness of two factors in a dataframe with a levelplot — con_view","text":"data Name data.frame formula formula like yield ~ fx*fy fun.aggregate function use aggregating data cells. Default mean. na.rm NA values removed? Default TRUE. xlab Label x axis ylab Label y axis cex.num Disjoint group number. cex.x Scale factor x axis tick labels.  Default 0.7. cex.y Scale factor y axis tick labels  Default 0.7. col.regions Function color regions. Default RedGrayBlue. cluster \"incidence\", cluster rows columns incidence matrix. dropNA TRUE, observed data NA dropped. ... parameters.","code":""},{"path":"https://kwstat.github.io/connected/reference/con_view.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"View connectedness of two factors in a dataframe with a levelplot — con_view","text":"Kevin Wright","code":""},{"path":"https://kwstat.github.io/connected/reference/con_view.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View connectedness of two factors in a dataframe with a levelplot — con_view","text":"","code":"require(lattice) #> Loading required package: lattice bar = transform(lattice::barley, env=factor(paste(site,year))) set.seed(123) bar <- bar[sample(1:nrow(bar), 70, replace=TRUE),] con_view(bar, yield ~ variety * env, cex.x=1, cex.y=.3, cluster=FALSE)   # Create a heatmap of cell counts w2b = colorRampPalette(c('wheat','black')) con_view(bar, yield ~ variety * env, fun.aggregate=length,   cex.x=1, cex.y=.3, col.regions=w2b, cluster=FALSE)   # Example from paper by Fernando et al. (1983). set.seed(42) data_fernando = transform(data_fernando,   y=stats::rnorm(9, mean=100)) con_view(data_fernando, y ~ gen*herd, cluster=FALSE,      main = \"Fernando unsorted\") #> Warning: There are 2 groups  con_view(data_fernando, y ~ gen*herd, cluster=TRUE,      main = \"Fernando unsorted\") #> Warning: There are 2 groups   # Example from Searle (1971), Linear Models, p. 325 dat2 = transform(data_searle,   y=stats::rnorm(nrow(data_searle)) + 100)  con_view(dat2, y ~ f1*f2, cluster=FALSE, main=\"data_searle unsorted\")  #> Warning: There are 3 groups  con_view(dat2, y ~ f1*f2, main=\"data_searle clustered\") #> Warning: There are 3 groups"},{"path":"https://kwstat.github.io/connected/reference/data_eccleston.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from Eccleston & Russell — data_eccleston","title":"Data from Eccleston & Russell — data_eccleston","text":"Data Eccleston & Russell","code":""},{"path":"https://kwstat.github.io/connected/reference/data_eccleston.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from Eccleston & Russell — data_eccleston","text":"","code":"data_eccleston"},{"path":"https://kwstat.github.io/connected/reference/data_eccleston.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data from Eccleston & Russell — data_eccleston","text":"object class data.frame 16 rows 3 columns.","code":""},{"path":"https://kwstat.github.io/connected/reference/data_eccleston.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data from Eccleston & Russell — data_eccleston","text":"Eccleston, J. K. Russell (1975). Connectedness orthogonality multi-factor designs. Biometrika, 62, 341-345. https://doi.org/10.1093/biomet/62.2.341","code":""},{"path":"https://kwstat.github.io/connected/reference/data_eccleston.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data from Eccleston & Russell — data_eccleston","text":"dataframe 3 treatment factors. pair factors connected, 3 factors disconnected. 'trt' column uses numbers match Eccleston (Table 1, Design 1) letters match Foulley (Table 13.3).","code":""},{"path":"https://kwstat.github.io/connected/reference/data_eccleston.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data from Eccleston & Russell — data_eccleston","text":"Foulley, J. L., Bouix, J., Goffinet, B., & Elsen, J. M. (1990). Connectedness Genetic Evaluation. Advanced Series Agricultural Sciences, 277–308. https://doi.org/10.1007/978-3-642-74487-7_13","code":""},{"path":"https://kwstat.github.io/connected/reference/data_eccleston.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data from Eccleston & Russell — data_eccleston","text":"","code":"# Each pair of factors is connected con_check(data_eccleston, ~ row + trt) #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> Levels: 1 con_check(data_eccleston, ~ col + trt) #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> Levels: 1 con_check(data_eccleston, ~ row + col) #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> Levels: 1 # But all three factors are COMPLETELY disconnected con_check(data_eccleston, ~ row + col + trt) #>  [1] 16 1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 #> Levels: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  set.seed(42) data_eccleston <- transform(data_eccleston,   y = rnorm(nrow(data_eccleston), mean=100)) con_view(data_eccleston, y ~ row*col, xlab=\"row\", ylab=\"col\")  con_view(data_eccleston, y ~ row*trt, xlab=\"row\", ylab=\"trt\")  con_view(data_eccleston, y ~ col*trt, xlab=\"col\", ylab=\"trt\")"},{"path":"https://kwstat.github.io/connected/reference/data_fernando.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from Fernando et al. — data_fernando","title":"Data from Fernando et al. — data_fernando","text":"Data Fernando et al.","code":""},{"path":"https://kwstat.github.io/connected/reference/data_fernando.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from Fernando et al. — data_fernando","text":"","code":"data_fernando"},{"path":"https://kwstat.github.io/connected/reference/data_fernando.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data from Fernando et al. — data_fernando","text":"object class data.frame 9 rows 2 columns.","code":""},{"path":"https://kwstat.github.io/connected/reference/data_fernando.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data from Fernando et al. — data_fernando","text":"Fernando et al. (1983). Identifying Connected Subsets Two-Way Classification Without Interaction. J. Dairy Science, 66, 1399-1402. Table 1. https://doi.org/10.3168/jds.S0022-0302(83)81951-1","code":""},{"path":"https://kwstat.github.io/connected/reference/data_fernando.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data from Fernando et al. — data_fernando","text":"dataframe 2 treatment factors. treatment combinations form 2 disconnected groups.","code":""},{"path":"https://kwstat.github.io/connected/reference/data_fernando.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data from Fernando et al. — data_fernando","text":"","code":"library(lfe) #> Loading required package: Matrix cbind(data_fernando,       .group=con_check(data_fernando, ~ gen + herd)) #>   gen herd .group #> 1  G2   H1      2 #> 2  G1   H1      2 #> 3  G1   H3      2 #> 4  G6   H3      2 #> 5  G3   H2      1 #> 6  G4   H2      1 #> 7  G5   H2      1 #> 8  G5   H4      1 #> 9  G7   H4      1 library(connected) set.seed(42) data_fernando = transform(data_fernando,   y=stats::rnorm(9, mean=100)) con_view(data_fernando, y ~ gen*herd, cluster=FALSE,   main = \"Fernando unsorted\") #> Warning: There are 2 groups  con_view(data_fernando, y ~ gen*herd, main=\"Fernando clustered\") #> Warning: There are 2 groups"},{"path":"https://kwstat.github.io/connected/reference/data_searle.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from Searle — data_searle","title":"Data from Searle — data_searle","text":"Data Searle","code":""},{"path":"https://kwstat.github.io/connected/reference/data_searle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from Searle — data_searle","text":"","code":"data_searle"},{"path":"https://kwstat.github.io/connected/reference/data_searle.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data from Searle — data_searle","text":"object class data.frame 14 rows 2 columns.","code":""},{"path":"https://kwstat.github.io/connected/reference/data_searle.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data from Searle — data_searle","text":"Searle (1971). Linear Models. Page 324.","code":""},{"path":"https://kwstat.github.io/connected/reference/data_searle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data from Searle — data_searle","text":"dataframe 2 treatment factors. treatment combinations form 3 disconnected groups.","code":""},{"path":"https://kwstat.github.io/connected/reference/data_searle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data from Searle — data_searle","text":"","code":"cbind(data_searle,       .group=con_check(data_searle, ~ f1 + f2)) #>    f1 f2 .group #> 1   1  1      3 #> 2   2  3      1 #> 3   2  4      1 #> 4   3  2      2 #> 5   3  6      2 #> 6   4  1      3 #> 7   4  5      3 #> 8   4  7      3 #> 9   5  3      1 #> 10  5  4      1 #> 11  6  3      1 #> 12  6  4      1 #> 13  7  2      2 #> 14  7  6      2 data_searle = transform(data_searle,   y = rnorm(nrow(data_searle), mean=100)) con_view(data_searle, y ~ f1*f2, cluster=FALSE, main=\"Searle unsorted\") #> Warning: There are 3 groups  con_view(data_searle, y ~ f1*f2, main=\"Searle clustered\") #> Warning: There are 3 groups"},{"path":"https://kwstat.github.io/connected/reference/data_tosh.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from Tosh — data_tosh","title":"Data from Tosh — data_tosh","text":"Data Tosh","code":""},{"path":"https://kwstat.github.io/connected/reference/data_tosh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from Tosh — data_tosh","text":"","code":"data_tosh"},{"path":"https://kwstat.github.io/connected/reference/data_tosh.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data from Tosh — data_tosh","text":"object class data.frame 15 rows 3 columns.","code":""},{"path":"https://kwstat.github.io/connected/reference/data_tosh.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data from Tosh — data_tosh","text":"Tosh, J. J., J. W. Wilton. (1990). Degree connectedness mixed models. Proceedings 4th World Congress Genetics applied Livestock Production, 480-483. Page 481.","code":""},{"path":"https://kwstat.github.io/connected/reference/data_tosh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data from Tosh — data_tosh","text":"dataframe 3 treatment factors. treatment combinations form 2 disconnected groups.","code":""},{"path":"https://kwstat.github.io/connected/reference/data_tosh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data from Tosh — data_tosh","text":"","code":"cbind(data_tosh,       .group=con_check(data_tosh, ~ a + b + c)) #>    a b c .group #> 1  1 1 1      1 #> 2  1 1 6      1 #> 3  1 2 1      1 #> 4  1 2 2      1 #> 5  1 2 4      1 #> 6  2 1 1      1 #> 7  2 1 6      1 #> 8  2 2 2      1 #> 9  2 2 6      1 #> 10 1 3 3      2 #> 11 1 3 5      2 #> 12 1 4 3      2 #> 13 2 3 3      2 #> 14 2 3 5      2 #> 15 2 4 5      2 data_tosh = transform(data_tosh,   y = rnorm(nrow(data_tosh), mean=100)) library(connected) con_view(data_tosh, y ~ b * c) #> Warning: There are 2 groups"},{"path":"https://kwstat.github.io/connected/reference/data_weeks1.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from Weeks & Williams example 1 — data_weeks1","title":"Data from Weeks & Williams example 1 — data_weeks1","text":"Data Weeks & Williams example 1","code":""},{"path":"https://kwstat.github.io/connected/reference/data_weeks1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from Weeks & Williams example 1 — data_weeks1","text":"","code":"data_weeks1"},{"path":"https://kwstat.github.io/connected/reference/data_weeks1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data from Weeks & Williams example 1 — data_weeks1","text":"object class data.frame 16 rows 3 columns.","code":""},{"path":"https://kwstat.github.io/connected/reference/data_weeks1.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data from Weeks & Williams example 1 — data_weeks1","text":"Weeks, David L. & Donald R. Williams (1964). Note Determination Connectedness N-Way Cross Classification. Technometrics, 6:3, 319-324. Table 1. http://dx.doi.org/10.1080/00401706.1964.10490188","code":""},{"path":"https://kwstat.github.io/connected/reference/data_weeks1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data from Weeks & Williams example 1 — data_weeks1","text":"dataframe 3 treatment factors. treatment combinations connected. Note: data based Table 1 Weeks & Williams. Table 2 missing treatment combination (1,2,4).","code":""},{"path":"https://kwstat.github.io/connected/reference/data_weeks1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data from Weeks & Williams example 1 — data_weeks1","text":"","code":"library(lfe) cbind(data_weeks1,       .group=con_check(data_weeks1, ~ f1+f2+f3)) #>    f1 f2 f3 .group #> 1   1  1  2      1 #> 2   1  1  3      1 #> 3   1  1  4      1 #> 4   1  2  1      1 #> 5   1  2  2      1 #> 6   1  2  4      1 #> 7   1  3  1      1 #> 8   1  3  2      1 #> 9   1  3  4      1 #> 10  2  1  2      1 #> 11  2  1  4      1 #> 12  2  2  1      1 #> 13  2  2  3      1 #> 14  2  2  4      1 #> 15  2  3  1      1 #> 16  2  3  4      1"},{"path":"https://kwstat.github.io/connected/reference/data_weeks2.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from Weeks & Williams example 2 — data_weeks2","title":"Data from Weeks & Williams example 2 — data_weeks2","text":"Data Weeks & Williams example 2","code":""},{"path":"https://kwstat.github.io/connected/reference/data_weeks2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from Weeks & Williams example 2 — data_weeks2","text":"","code":"data_weeks2"},{"path":"https://kwstat.github.io/connected/reference/data_weeks2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data from Weeks & Williams example 2 — data_weeks2","text":"object class data.frame 62 rows 3 columns.","code":""},{"path":"https://kwstat.github.io/connected/reference/data_weeks2.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data from Weeks & Williams example 2 — data_weeks2","text":"Weeks, David L. & Donald R. Williams (1964). Note Determination Connectedness N-Way Cross Classification. Technometrics, 6:3, 319-324. Table 3. http://dx.doi.org/10.1080/00401706.1964.10490188","code":""},{"path":"https://kwstat.github.io/connected/reference/data_weeks2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data from Weeks & Williams example 2 — data_weeks2","text":"dataframe 3 treatment factors. treatment combinations form 4 disconnected groups. Note: data based Table 3 Weeks & Williams. groups defined text missing combinations.","code":""},{"path":"https://kwstat.github.io/connected/reference/data_weeks2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data from Weeks & Williams example 2 — data_weeks2","text":"","code":"library(lfe) cbind(data_weeks2,       .group=con_check(data_weeks2, ~f1 + f2 + f3)) #>    f1 f2 f3 .group #> 1   2  2  2      4 #> 2   4  2  2      4 #> 3   2  2  4      4 #> 4   4  2  4      4 #> 5   2  4  2      4 #> 6   4  4  2      4 #> 7   2  4  4      4 #> 8   4  4  4      4 #> 9   2  1  1      1 #> 10  2  1  3      1 #> 11  2  1  5      1 #> 12  2  3  1      1 #> 13  2  3  3      1 #> 14  2  3  5      1 #> 15  2  5  1      1 #> 16  2  5  3      1 #> 17  2  5  5      1 #> 18  4  1  1      1 #> 19  4  1  3      1 #> 20  4  1  5      1 #> 21  4  3  1      1 #> 22  4  3  3      1 #> 23  4  3  5      1 #> 24  4  5  1      1 #> 25  4  5  3      1 #> 26  4  5  5      1 #> 27  1  2  1      2 #> 28  1  2  3      2 #> 29  1  2  5      2 #> 30  1  4  1      2 #> 31  1  4  3      2 #> 32  1  4  5      2 #> 33  3  2  1      2 #> 34  3  2  3      2 #> 35  3  2  5      2 #> 36  3  4  1      2 #> 37  3  4  3      2 #> 38  3  4  5      2 #> 39  5  2  1      2 #> 40  5  2  3      2 #> 41  5  2  5      2 #> 42  5  4  1      2 #> 43  5  4  3      2 #> 44  5  4  5      2 #> 45  1  1  2      3 #> 46  1  1  4      3 #> 47  1  3  2      3 #> 48  1  3  4      3 #> 49  1  5  2      3 #> 50  1  5  4      3 #> 51  3  1  2      3 #> 52  3  1  4      3 #> 53  3  3  2      3 #> 54  3  3  4      3 #> 55  3  5  2      3 #> 56  3  5  4      3 #> 57  5  1  2      3 #> 58  5  1  4      3 #> 59  5  3  2      3 #> 60  5  3  4      3 #> 61  5  5  2      3 #> 62  5  5  4      3"},{"path":"https://kwstat.github.io/connected/news/index.html","id":"connected-02-20250204","dir":"Changelog","previous_headings":"","what":"connected 0.2 (2025.02.04)","title":"connected 0.2 (2025.02.04)","text":"Initial CRAN submission. License GPL2 Steve Callistein.","code":""},{"path":"https://kwstat.github.io/connected/news/index.html","id":"connected-01-2024-06-01","dir":"Changelog","previous_headings":"","what":"connected 0.1 (2024-06-01)","title":"connected 0.1 (2024-06-01)","text":"con_filter() function began life minPer() sometime 2012-01-01. con_view() function began heat() 2013-01-01.","code":""}]
